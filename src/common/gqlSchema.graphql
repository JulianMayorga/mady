type Config implements Node {
  srcPaths: [String]
  srcExtensions: [String]
  langs: [String]
  id: ID!
}

input ConfigUpdate {
  srcPaths: [String]
  srcExtensions: [String]
  langs: [String]
}

input CreateKeyInput {
  set: KeyCreate
  unset: [String]
  clientMutationId: String!
}

type CreateKeyPayload {
  viewer: Viewer
  key: Key
  clientMutationId: String!
}

input CreateTranslationInput {
  set: TranslationCreate
  unset: [String]
  clientMutationId: String!
}

type CreateTranslationPayload {
  viewer: Viewer
  translation: Translation
  clientMutationId: String!
}

input DeleteKeyInput {
  id: ID!
  clientMutationId: String!
}

type DeleteKeyPayload {
  viewer: Viewer
  deletedKeyId: ID
  clientMutationId: String!
}

input DeleteTranslationInput {
  id: ID!
  clientMutationId: String!
}

type DeleteTranslationPayload {
  viewer: Viewer
  deletedTranslationId: ID
  clientMutationId: String!
}

type Key implements Node {
  id: ID!
  context: String
  text: String
  firstUsed: String
  unusedSince: String
  sources: [String]
}

input KeyCreate {
  context: String
  text: String
  firstUsed: String
  unusedSince: String
}

input KeyUpdate {
  context: String
  text: String
  firstUsed: String
  unusedSince: String
}

type Mutation {
  updateConfig(input: UpdateConfigInput!): UpdateConfigPayload
  createKey(input: CreateKeyInput!): CreateKeyPayload
  updateKey(input: UpdateKeyInput!): UpdateKeyPayload
  deleteKey(input: DeleteKeyInput!): DeleteKeyPayload
  parseSrcFiles(input: ParseSrcFilesInput!): ParseSrcFilesPayload
  createTranslation(input: CreateTranslationInput!): CreateTranslationPayload
  updateTranslation(input: UpdateTranslationInput!): UpdateTranslationPayload
  deleteTranslation(input: DeleteTranslationInput!): DeleteTranslationPayload
}

interface Node {
  id: ID!
}

input ParseSrcFilesInput {
  clientMutationId: String!
}

type ParseSrcFilesPayload {
  keys: [Key]
  viewer: Viewer
  clientMutationId: String!
}

type Query {
  node(id: ID!): Node
  nodeOrNull(id: ID): Node
  viewer: Viewer
}

type Translation implements Node {
  id: ID!
  lang: String
  translation: String
  keyId: ID
}

input TranslationCreate {
  lang: String
  translation: String
  keyId: ID
}

input TranslationUpdate {
  translation: String
}

input UpdateConfigInput {
  set: ConfigUpdate
  unset: [String]
  clientMutationId: String!
}

type UpdateConfigPayload {
  viewer: Viewer
  config: Config
  clientMutationId: String!
}

input UpdateKeyInput {
  id: ID!
  set: KeyUpdate
  unset: [String]
  clientMutationId: String!
}

type UpdateKeyPayload {
  viewer: Viewer
  key: Key
  clientMutationId: String!
}

input UpdateTranslationInput {
  id: ID!
  set: TranslationUpdate
  unset: [String]
  clientMutationId: String!
}

type UpdateTranslationPayload {
  viewer: Viewer
  translation: Translation
  clientMutationId: String!
}

type Viewer implements Node {
  id: ID!
  config: Config
  keys: [Key]
  translations(lang: String): [Translation]
}
