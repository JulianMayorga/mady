schema {
  query: Query
  mutation: Mutation
}

input CompileTranslationsInput {
  storyId: String
  clientMutationId: String!
}

type CompileTranslationsPayload {
  clientMutationId: String!
}

type Config implements Node {
  srcPaths: [String]
  srcExtensions: [String]
  langs: [String]
  fMinify: Boolean
  id: ID!
}

input ConfigUpdate {
  srcPaths: [String]
  srcExtensions: [String]
  langs: [String]
  fMinify: Boolean
}

input CreateKeyInput {
  storyId: String
  set: KeyCreate
  unset: [String]
  clientMutationId: String!
}

type CreateKeyPayload {
  viewer: Viewer
  key: Key
  clientMutationId: String!
}

input CreateTranslationInput {
  storyId: String
  set: TranslationCreate
  unset: [String]
  clientMutationId: String!
}

type CreateTranslationPayload {
  viewer: Viewer
  translation: Translation
  key: Key
  clientMutationId: String!
}

input DeleteKeyInViewerKeysInput {
  storyId: String
  id: ID!
  parentId: ID!
  clientMutationId: String!
}

type DeleteKeyInViewerKeysPayload {
  viewer: Viewer
  deletedKeyId: ID
  parent: Viewer
  clientMutationId: String!
}

input DeleteTranslationInKeyTranslationsInput {
  storyId: String
  id: ID!
  parentId: ID!
  clientMutationId: String!
}

type DeleteTranslationInKeyTranslationsPayload {
  viewer: Viewer
  deletedTranslationId: ID
  parent: Key
  key: Key
  clientMutationId: String!
}

type Key implements Node {
  id: ID!
  context: String
  text: String
  firstUsed: String
  unusedSince: String
  sources: [String]
  translations(after: String, first: Int, before: String, last: Int): TranslationConnection
}

type KeyConnection {
  pageInfo: PageInfo!
  edges: [KeyEdge]
}

input KeyCreate {
  context: String
  text: String
  firstUsed: String
  unusedSince: String
}

type KeyEdge {
  node: Key
  cursor: String!
}

input KeyUpdate {
  context: String
  text: String
  firstUsed: String
  unusedSince: String
}

type Mutation {
  updateConfig(input: UpdateConfigInput!): UpdateConfigPayload
  createKey(input: CreateKeyInput!): CreateKeyPayload
  updateKey(input: UpdateKeyInput!): UpdateKeyPayload
  deleteKeyInViewerKeys(input: DeleteKeyInViewerKeysInput!): DeleteKeyInViewerKeysPayload
  parseSrcFiles(input: ParseSrcFilesInput!): ParseSrcFilesPayload
  createTranslation(input: CreateTranslationInput!): CreateTranslationPayload
  updateTranslation(input: UpdateTranslationInput!): UpdateTranslationPayload
  deleteTranslationInKeyTranslations(input: DeleteTranslationInKeyTranslationsInput!): DeleteTranslationInKeyTranslationsPayload
  compileTranslations(input: CompileTranslationsInput!): CompileTranslationsPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input ParseSrcFilesInput {
  storyId: String
  clientMutationId: String!
}

type ParseSrcFilesPayload {
  keys(after: String, first: Int, before: String, last: Int): KeyConnection
  viewer: Viewer
  clientMutationId: String!
}

type Query {
  node(id: ID!): Node
  viewer: Viewer
}

type Translation implements Node {
  id: ID!
  lang: String
  translation: String
  keyId: ID
}

type TranslationConnection {
  pageInfo: PageInfo!
  edges: [TranslationEdge]
}

input TranslationCreate {
  lang: String
  translation: String
  keyId: ID
}

type TranslationEdge {
  node: Translation
  cursor: String!
}

input TranslationUpdate {
  translation: String
}

input UpdateConfigInput {
  storyId: String
  set: ConfigUpdate
  unset: [String]
  clientMutationId: String!
}

type UpdateConfigPayload {
  viewer: Viewer
  config: Config
  clientMutationId: String!
}

input UpdateKeyInput {
  storyId: String
  id: ID!
  set: KeyUpdate
  unset: [String]
  clientMutationId: String!
}

type UpdateKeyPayload {
  viewer: Viewer
  key: Key
  clientMutationId: String!
}

input UpdateTranslationInput {
  storyId: String
  id: ID!
  set: TranslationUpdate
  unset: [String]
  clientMutationId: String!
}

type UpdateTranslationPayload {
  viewer: Viewer
  translation: Translation
  clientMutationId: String!
}

type Viewer implements Node {
  id: ID!
  config: Config
  keys(after: String, first: Int, before: String, last: Int): KeyConnection
  translations(after: String, first: Int, before: String, last: Int): TranslationConnection
  anyNode(id: ID): Node
}
