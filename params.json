{
  "name": "Mady",
  "tagline": "An easy-to-use tool to manage and translate ICU MessageFormat messages",
  "body": "# Mady [![npm version](https://img.shields.io/npm/v/mady.svg)](https://www.npmjs.com/package/mady)\r\n\r\n## What?\r\n\r\nAn easy-to-use tool to manage and translate ICU MessageFormat messages.\r\n\r\n![Mady UI](https://raw.githubusercontent.com/guigrpa/mady/master/docs/01-ui.png)\r\n\r\n*Yes, it's Mady's view of itself!* :open_mouth: More complex [MessageFormat](https://messageformat.github.io/guide/) examples:\r\n\r\n```js\r\nconsole.log(_t(\"someContext_{NUM, plural, one{1 hamburger} other{# hamburgers}}\", { NUM: 1 }));\r\n// 1 hamburguesa\r\nconsole.log(_t(\"someContext_{NUM, plural, one{1 hamburger} other{# hamburgers}}\", { NUM: 2 }));\r\n// 2 hamburguesas\r\n```\r\n\r\nRemember: this is not only for translation! Even if you only use English, you may need MessageFormat for gender and pluralization.\r\n\r\n## Why?\r\n\r\n* **MessageFormat messages**: while it does not solve all the problems in the huge field of i18n, MessageFormat is a much more powerful tool than the conventional gettext (IMHO).\r\n* Use it as a development tool in your project: an **easy-to-use UI** that allows **parsing source files, adding languages and translations, comparing translations side-by-side, and compiling to (optionally minified) JavaScript modules**.\r\n* Use it as a library: a no-frills translate function to run the compiled language modules.\r\n\r\n## How?\r\n\r\n### Installation\r\n\r\n```\r\n$ npm install --save-dev mady\r\n```\r\n\r\n\r\n### Usage\r\n\r\nThere are two main parts in Mady: the web-based translation app and the translate function.\r\n\r\n\r\n#### The translation app\r\n\r\nAccess the translation app by running:\r\n\r\n```bash\r\n$ ./node_modules/.bin/mady\r\n```\r\n\r\nOr just add the following line to your `package.json`:\r\n\r\n```json\r\n\"scripts\": {\r\n    \"translate\": \"mady\"\r\n}\r\n```\r\n\r\nand run `npm run translate`.\r\n\r\nThe first time you run it, Mady will ask you for some additional information: the path to your locales folder and a default port for the application. Now open Mady's URL in your browser (http://localhost:8080 by default) and there you go!\r\n\r\nFrom the web application, you can:\r\n\r\n* Update the key database with new keys extracted from your source files\r\n* Configure your languages, source paths, file extensions, etc.\r\n* Translate your keys to the different supported languages\r\n* [Automatically] export translations to JS files, for use by the [translate function](#the-translate-function)\r\n\r\nMessages in your source files should have the form: `_t('someContext_Once upon a time...')` (single or double quotes are supported), where `_t()` is the default name for the translate function (see below), `someContext` is some hint for the translator and `Once upon a time...` is your untranslated [MessageFormat](#messageformat) message.\r\n\r\nConfiguration looks like this:\r\n\r\n![Mady config](https://raw.githubusercontent.com/guigrpa/mady/master/docs/02-config.png)\r\n\r\nYou can see the UI in English, Spanish and Catalan at the moment. Mady *eats its own dog food*.\r\n\r\n\r\n#### The translate function\r\n\r\nUsing the translate function is similarly straightforward:\r\n\r\n```js\r\nimport _t from 'mady';\r\nimport locales from './locales/es-ES';\r\n\r\n_t.setLocales(locales);\r\n\r\nconsole.log(_t('someContext_Once upon a time...'));\r\n// Érase una vez...\r\nconsole.log(_t('someContext_Number of items: {NUM}', { NUM: 5 }));\r\n// Número de ítems: 5\r\nconsole.log(_t(\"someContext_{NUM, plural, one{1 hamburger} other{# hamburgers} }\", { NUM: 1 }));\r\n// 1 hamburguesa\r\nconsole.log(_t(\"someContext_{NUM, plural, one{1 hamburger} other{# hamburgers} }\", { NUM: 2 }));\r\n// 2 hamburguesas\r\n```\r\n\r\n\r\n## MessageFormat\r\n\r\nMady uses the [messageformat.js](https://github.com/SlexAxton/messageformat.js) library by Alex Sexton, which \"supports and extends all parts of the **[ICU MessageFormat]** standard (see the [user guide](http://userguide.icu-project.org/formatparse/messages)), with the exception of the deprecated ChoiceFormat.\" IMHO, and while it does not solve all the problems in the huge field of i18n, it is a much more powerful tool than the conventional gettext.\r\n\r\nSome examples of MessageFormat messages are given above ([more here](https://messageformat.github.io/guide/)), but this does not even scratch the surface of what is enabled by this standard.\r\n\r\n\r\n## Internals\r\n\r\nMady is built with [React](https://facebook.github.io/react/) and [Relay](https://facebook.github.io/relay/).\r\n\r\n\r\n## [What's changed since version X?](https://github.com/guigrpa/mady/blob/master/CHANGELOG.md)\r\n\r\n## Shall I? — The MIT license\r\n\r\nCopyright (c) [Guillermo Grau Panea](https://github.com/guigrpa) 2016\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}